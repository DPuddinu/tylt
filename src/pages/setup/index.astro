---
import { createActivity } from '@/api/activities/mutations';
import { createGoal } from '@/api/goals/mutations';
import { setSetupDone } from '@/api/setup/mutations';
import { getSetupDone } from '@/api/setup/queries';
import ActivityForm from '@/components/ActivityForm.astro';
import GoalForm from '@/pages/goals/_components/GoalForm.astro';
import { ActivitySchema } from '@/types/activities.types';
import { GoalInsertSchema } from '@/types/goal.types';
import { setupDoneKey } from '@/utils/constants';
import Layout from '@layouts/MainLayout.astro';
import SetupLayout from '@layouts/SetupLayout.astro';
import type { TActivity } from 'db/config';

const STEP_1 = 'SETUP_STEP_1';

const { user } = Astro.locals;
if (await getSetupDone(user.id)) return Astro.redirect('/goals');

const step = Astro.url.searchParams.get('step');
if (!step) return Astro.redirect('/setup?step=1');

let activities: TActivity[] = [];

try {
  const savedStep1 = Astro.cookies.get(STEP_1)?.value;
  if (savedStep1) {
    const parsedStep1 = ActivitySchema.parse(JSON.parse(savedStep1));
    activities = [
      {
        id: -1,
        authorId: user.id,
        ...parsedStep1
      }
    ];
  }
  if (step === '2' && !savedStep1) return Astro.redirect('/setup?step=1');
} catch (error) {
  return Astro.redirect('/error?redirect=setup');
}

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  if (step === '1') {
    try {
      const validated = ActivitySchema.parse(formData);

      Astro.cookies.set(STEP_1, JSON.stringify(validated), {
        httpOnly: true
      });

      return Astro.redirect('/setup?step=2');
    } catch (error) {
      return Astro.redirect('/error?redirect=setup');
    }
  }
  if (step === '2') {
    try {
      const data = GoalInsertSchema.parse(formData);
      const { name, color, icon } = activities[0];
      const activity = await createActivity({
        name,
        color,
        icon,
        authorId: user.id
      });
      await createGoal({
        ...data,
        activityId: activity.id,
        authorId: user.id,
        authorName: user.name
      });
      await setSetupDone(user.id);
      Astro.cookies.set(STEP_1, '', {
        maxAge: 0
      });
      Astro.cookies.set(setupDoneKey, 'true');
      return Astro.redirect('/goals');
    } catch (error) {
      return Astro.redirect('/error?redirect=setup');
    }
  }
}
---

<Layout>
  <SetupLayout>
    {step === '1' && <ActivityForm transition:animate='slide' />}
    {
      step === '2' && (
        <GoalForm activities={activities} transition:animate='slide'>
          <a href='/setup' class='btn btn-ghost text-base-content'>
            Cancel
          </a>
        </GoalForm>
      )
    }
  </SetupLayout>
</Layout>
