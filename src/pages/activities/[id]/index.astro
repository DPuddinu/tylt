---
import { updateActivity } from '@/api/activities/mutations';
import { getActivities, getActivityById } from '@/api/activities/queries';
import { ITEMS_PER_PAGE, getGoalByActivityId } from '@/api/goals/queries';
import { ActivitySchema } from '@/types/activities.types';
import type { GoalFilters } from '@/types/filters.types';
import ActivityForm from '@components/ActivityForm.astro';
import Card from '@components/Card.astro';
import GoalsList from '@components/GoalsList.astro';
import Popover from '@components/Popover.astro';
import Spinner from '@components/Spinner.astro';
import Layout from '@layouts/MainLayout.astro';
import type { TActivity, TGoal } from 'db/config';
import { ZodError } from 'zod';

const { id } = Astro.params;
const { user } = Astro.locals;

const params = {
  activity: id ?? null
};
const goalFilters: GoalFilters = {
  activity: Number(params.activity) || undefined
};

let activity: TActivity | undefined;
const offsetFilter = Number(Astro.url.searchParams.get('offset')) || 0;
const currentPage = offsetFilter / ITEMS_PER_PAGE + 1;
try {
  activity = await getActivityById({
    id: Number(id),
    userId: user.id
  });
} catch (error) {
  return Astro.redirect(`/error?redirect=activities/${activity.id}`);
}

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();

  try {
    if (!activity) throw new Error('Activity not found');
    const data = ActivitySchema.parse(formData);
    await updateActivity({ ...activity, ...data });

    return Astro.redirect(`/activities/${activity.id}`);
  } catch (error) {
    if (error instanceof ZodError) {
    } else return Astro.redirect(`/error?redirect=activities/${activity.id}`);
  }
}
---

<Layout pageName='Activity'>
  <div class='flex-container gap-8'>
    <div class='flex justify-between'>
      <h1 class='text-3xl font-bold text-base-content'>{activity?.name}</h1>
      <div class='content-center'>
        <button id='edit-activity' class='uppercase sm:btn active:scale-105' popovertarget='edit-activity-dialog'>
          <svg
            xmlns='http://www.w3.org/2000/svg'
            fill='none'
            viewBox='0 0 24 24'
            stroke-width='1.5'
            stroke='currentColor'
            class='size-6 active:scale-105 active:text-warning sm:hidden'>
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              d='m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125'>
            </path>
          </svg>
          <span class='hidden sm:block'>Edit Activity</span>
        </button>
        <Popover id='edit-activity-dialog' title='Edit Activity'>
          <ActivityForm activity={activity}>
            <button
              type='button'
              popovertargetaction='hide'
              popovertarget='edit-activity-dialog'
              id='cancel-edit-btn'
              class='btn btn-ghost text-base-content'>
              Cancel
            </button>
          </ActivityForm>
        </Popover>
      </div>
    </div>
    <Card title="Goals">
      <GoalsList goalFilters={goalFilters} currentPage={currentPage} params={params} server:defer>
        <Spinner slot='fallback' />
      </GoalsList>
    </Card>
  </div>
</Layout>
