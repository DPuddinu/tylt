---
import { getActivities } from '@/api/activities/queries';
import { ITEMS_PER_PAGE } from '@/api/goals/queries';
import GoalFilterSidebar from '@/pages/goals/_components/GoalFilters.astro';
import type { GoalFilters, GoalFormParam } from '@/types/filters.types';
import Layout from '@layouts/MainLayout.astro';
import type { TActivity } from 'db/config';
import GoalsContainer from './_components/GoalsContainer.astro';

const { user } = Astro.locals;

function getParam(param: string) {
  return Astro.url.searchParams.get(param);
}

function getGoalParam(param: GoalFormParam) {
  return getParam(param);
}
const params = {
  completed: getGoalParam('completed'),
  notCompleted: getGoalParam('notCompleted'),
  expired: getGoalParam('expired'),
  notExpired: getGoalParam('notExpired'),
  fromDate: getGoalParam('fromDate'),
  toDate: getGoalParam('toDate'),
  activity: getGoalParam('activity')
};
const goalFilters: GoalFilters = {
  completed: params.completed === 'on' || undefined,
  notCompleted: params.notCompleted === 'on' || undefined,
  expired: params.expired === 'on' || undefined,
  notExpired: params.notExpired === 'on' || undefined,
  fromDate: params.fromDate || undefined,
  toDate: params.toDate || undefined,
  activity: Number(params.activity) || undefined
};
const offsetFilter = Number(getParam('offset')) || 0;
const currentPage = offsetFilter / ITEMS_PER_PAGE + 1;

let activities: TActivity[] = [];

try {
  activities = await getActivities(user.id);
} catch (error) {
  return Astro.redirect('error?redirect=goals');
}
---

<Layout pageName='Goals'>
  <section class='flex flex-col gap-4 md:flex-row'>
    <GoalFilterSidebar activities={activities} filters={goalFilters} />
    <GoalsContainer
      goalFilters={goalFilters}
      currentPage={currentPage}
      params={params}
      offset={offsetFilter}
      server:defer>
      <div class='flex grow justify-center' slot='fallback'>
        <span class='loading loading-spinner loading-lg'></span>
      </div>
    </GoalsContainer>
  </section>
</Layout>

<script>
  const cacheName = 'tylt-v1';
  self.addEventListener('fetch', (event) => {
    event.respondWith(
      caches.match(event.request).then((response) => {
        // caches.match() always resolves
        // but in case of success response will have value
        if (response !== undefined) {
          return response;
        } else {
          return fetch(event.request)
            .then((response) => {
              // response may be used only once
              // we need to save clone to put one copy in cache
              // and serve second one
              let responseClone = response.clone();

              caches.open(cacheName).then((cache) => {
                cache.put(event.request, responseClone);
              });
              return response;
            })
            .catch(() => caches.match('/gallery/myLittleVader.jpg'));
        }
      })
    );
  });
  async function getData() {
    const url = 'http://localhost:4321/api/goals.json';
    let cachedData = await getCachedData(cacheName, url);

    if (cachedData) {
      console.log('Retrieved cached data', cachedData);
      return cachedData;
    }

    console.log('Fetching fresh data');

    const cacheStorage = await caches.open(cacheName);
    await cacheStorage.add(url);
    cachedData = await getCachedData(cacheName, url);

    return cachedData;
  }

  // Get data from the cache.
  async function getCachedData(cacheName: string, url: string) {
    const cacheStorage = await caches.open(cacheName);
    const cachedResponse = await cacheStorage.match(url);

    if (!cachedResponse || !cachedResponse.ok) {
      return false;
    }

    return await cachedResponse.json();
  }

  await getData();
  document.addEventListener('astro:page-load', async () => {
    const { data } = await fetch('/api/goals.json').then((res) => res.json());
  });
</script>