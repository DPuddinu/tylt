---
import DatePicker from '@/components/DatePicker.astro';
import RichTextEditor from '@/components/RichTextEditor.astro';
import TextInput from '@/components/TextInput.astro';
import { formNames } from '@/types/goalForm.types';
import InputContainer from '@components/InputContainer.astro';
import SubmitButton from '@components/SubmitButton.astro';

import type { TGoal } from 'db/config';
type Props = {
  goal?: TGoal;
};
const { goal } = Astro.props;
---

<form id='goal-form' method='post' class='flex w-full grow flex-col gap-6 rounded-lg bg-base-200 p-4'>
  <div class='grid md:grid-cols-2 gap-2'>
    <InputContainer HTMLFor='title-input' label='Title'>
      <TextInput id='title-input' name={formNames.title.inputName} value={goal?.title} placeholder='Type title...' />
    </InputContainer>
    <InputContainer HTMLFor={formNames.activityId.label} label={formNames.activityId.label}>
      <slot name='activities' />
    </InputContainer>
    <InputContainer HTMLFor={formNames.completionDate.label} label={formNames.completionDate.label}>
      <DatePicker
        name={formNames.completionDate.inputName}
        value={goal?.completionDate ? goal.completionDate : new Date()}
      />
    </InputContainer>
    <InputContainer HTMLFor={formNames.dueDate.label} label={formNames.dueDate.label}>
      <DatePicker name={formNames.dueDate.inputName} value={goal?.dueDate} />
    </InputContainer>
  </div>

  <div class='grow'>
    <InputContainer className='h-full' HTMLFor='description' label={formNames.description.label}>
      <button type='button' class='text-base-content' onclick='editorDialog.showModal()' slot='label'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          fill='none'
          viewBox='0 0 24 24'
          stroke-width='2'
          stroke='currentColor'
          class='h-4 w-4'>
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            d='M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15'>
          </path>
        </svg>
      </button>
      <dialog id='editorDialog' class='modal items-center'>
        <div class='modal-box flex h-[90vh] max-w-screen-xl flex-col gap-4'>
          <h3 class='text-lg font-bold'>Description</h3>
          <div class='grow'>
            <RichTextEditor
              name={formNames.description.inputName}
              id='dialog-editor'
              placeholder='Add new Description...'
              value={goal?.description}
              register={false}
            />
          </div>
          <footer class='flex justify-end gap-4'>
            <button onclick={`editorDialog.close();`} type='button' class='btn btn-ghost text-base-content'>
              Cancel
            </button>
            <button id='confirm-editor-dialog-btn' type='button' class='btn btn-warning' onclick='editorDialog.close()'>
              Confirm
            </button>
          </footer>
        </div>
      </dialog>
      <RichTextEditor
        name={formNames.description.inputName}
        id='main-editor'
        placeholder='Add new Description...'
        value={goal?.description}
      />
    </InputContainer>
  </div>
  <footer id='save-btn' class='flex justify-end gap-4'>
    <slot />
    <SubmitButton className='!btn-warning disabled:!bg-warning'>{goal ? 'Update' : 'Create'}</SubmitButton>
  </footer>
</form>
<script>
  import Quill from 'quill';
  const dialogEditorNode = document.querySelector(`#dialog-editor`);
  const mainEditorNode = document.querySelector(`#main-editor`);
  if (dialogEditorNode && mainEditorNode) {
    setTimeout(() => {
      const dialogEditor = Quill.find(dialogEditorNode) as Quill;
      const mainEditor = Quill.find(mainEditorNode) as Quill;

      const confirmBtn = document.querySelector('#confirm-editor-dialog-btn') as HTMLButtonElement;
      confirmBtn.onclick = () => {
        mainEditor.setContents(dialogEditor.getContents().ops);
        const dialog = document.querySelector('#editorDialog') as HTMLDialogElement;
        dialog.close();
      };
    }, 0);
  }
</script>
